name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      
      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-
      
      - name: Cache cargo index
        uses: actions/cache@v3
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-git-
      
      - name: Cache cargo build
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-
      
      - name: Check formatting
        run: cargo fmt --all -- --check
      
      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings
      
      - name: Run tests
        run: cargo test --all-features --verbose
      
      - name: Build documentation
        run: cargo doc --no-deps --all-features

  check-json:
    name: Check JSON Formatting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq
      
      - name: Check JSON test cases are formatted
        run: |
          set -e
          
          # Check if test cases directory exists
          if [ ! -d "test_cases/failed_deserializations" ]; then
            echo "No test cases directory found, skipping"
            exit 0
          fi
          
          # Check each JSON file
          FAILED=0
          for file in test_cases/failed_deserializations/*.json; do
            if [ -f "$file" ]; then
              filename=$(basename "$file")
              
              # Create a formatted version
              if jq '.' "$file" > /tmp/formatted.json 2>/dev/null; then
                # Check if the file is already formatted
                if ! cmp -s "$file" /tmp/formatted.json; then
                  echo "❌ $filename is not properly formatted"
                  echo "  Run ./format_test_cases.sh to fix"
                  FAILED=1
                else
                  echo "✅ $filename is properly formatted"
                fi
              else
                echo "❌ $filename contains invalid JSON"
                FAILED=1
              fi
            fi
          done
          
          if [ "$FAILED" -eq 1 ]; then
            echo ""
            echo "Some JSON files are not properly formatted."
            echo "Please run ./format_test_cases.sh locally and commit the changes."
            exit 1
          fi

  msrv:
    name: Minimum Supported Rust Version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Rust 1.85
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: "1.85"
      
      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-msrv-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-msrv-
      
      - name: Cache cargo index
        uses: actions/cache@v3
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-git-msrv-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-git-msrv-
      
      - name: Cache cargo build
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-msrv-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-msrv-
      
      - name: Check MSRV
        run: cargo check --all-features